#!/usr/bin/env python
# DWA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, bool_t


gen = ParameterGenerator()


gen.add("carrot_distance",
        double_t, 0, "The distance from the center point of the robot to place the carrot, in meters", 1.0)
gen.add("p_angle", double_t, 0, "The p action of the controller for the angle between the carrot and the robot", 1.0)
gen.add("slow_down_margin",
        double_t, 0, "The amount of seconds the robot starts braking before it's really needed.", 1.0)

gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("discretize_by_time", bool_t, 0, "Use sim_granularity in seconds instead of meters.", False)

gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.01, 0.0)

gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0)
gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0.2, 0)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)


gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)


def add_generic_localplanner_params(gen):
    """The local planner limits have been copied from the melodic-devel branch, this makes it easier to implement
    backwards compatability because the parameter names have changed. """
    # velocities
    gen.add("max_vel_trans", double_t, 0, "The absolute value of the maximum translational velocity for the robot in m/s", 0.55, 0)
    gen.add("min_vel_trans", double_t, 0, "The absolute value of the minimum translational velocity for the robot in m/s", 0.1, 0)

    gen.add("max_vel_x", double_t, 0, "The maximum x velocity for the robot in m/s", 0.55)
    gen.add("min_vel_x", double_t, 0, "The minimum x velocity for the robot in m/s", 0.0)

    gen.add("max_vel_y", double_t, 0, "The maximum y velocity for the robot in m/s", 0.1)
    gen.add("min_vel_y", double_t, 0, "The minimum y velocity for the robot in m/s", -0.1)

    gen.add("max_vel_theta", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  1.0, 0)
    gen.add("min_vel_theta", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", 0.4, 0)

    # acceleration
    gen.add("acc_lim_x", double_t, 0, "The acceleration limit of the robot in the x direction", 2.5, 0, 20.0)
    gen.add("acc_lim_y", double_t, 0, "The acceleration limit of the robot in the y direction", 2.5, 0, 20.0)
    gen.add("acc_lim_theta", double_t, 0, "The acceleration limit of the robot in the theta direction", 3.2, 0, 20.0)
    gen.add("acc_lim_trans", double_t, 0, "The absolute value of the maximum translational acceleration for the robot in m/s^2", 0.1, 0)

    gen.add("prune_plan", bool_t, 0, "Start following closest point of global plan, not first point (if different).", False)

    gen.add("xy_goal_tolerance", double_t, 0, "Within what maximum distance we consider the robot to be in goal", 0.1)
    gen.add("yaw_goal_tolerance", double_t, 0, "Within what maximum angle difference we consider the robot to face goal direction", 0.1)

    gen.add("trans_stopped_vel", double_t, 0, "Below what maximum velocity we consider the robot to be stopped in translation", 0.1)
    gen.add("theta_stopped_vel", double_t, 0, "Below what maximum rotation velocity we consider the robot to be stopped in rotation", 0.1)


add_generic_localplanner_params(gen)


exit(gen.generate("ruvu_carrot_local_planner", "ruvu_carrot_local_planner", "CarrotPlanner"))
