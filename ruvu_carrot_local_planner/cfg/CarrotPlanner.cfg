#!/usr/bin/env python
# DWA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, bool_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)

gen.add("carrot_distance",
        double_t, 0, "The distance from the center point of the robot to place the carrot, in meters", 1.0)
gen.add("p_angle", double_t, 0, "The p action of the controller for the angle between the carrot and the robot", 1.0)
gen.add("slow_down_margin",
        double_t, 0, "The amount of seconds the robot starts braking before it's really needed.", 1.0)

gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.01, 0.0)

gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0)
gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0.2, 0)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

exit(gen.generate("ruvu_carrot_local_planner", "ruvu_carrot_local_planner", "CarrotPlanner"))
